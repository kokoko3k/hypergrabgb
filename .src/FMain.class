' Gambas class file

Public xDisplay As String = ":0.0"

Public hhost As String = "127.0.0.1"
Public hport As String = "19444"

Public sW As Integer = 1920
Public sH As Integer = 1080

Public dW As Integer = 16
Public dH As Integer = 9

Public fps_in As Integer = 10
Public fps_out As Integer = 60

Public smooth1 As Integer = 60
Public smooth2 As Integer = 0

Public extrafilter_pre As String = ""  '<-works on unmodified grabbed image
Public extrafilter_post As String = "" '<-works on scaled grabbed image at grabbing framerate
Public extrafilter_mid As String = ""  '<-works on scaled grabbed image at output framerate

Public bDebug As Boolean = False

Public imgsize As Integer = dW * dH * 3

Public ffmpeg As Process

Public buffer As String[]                               'since ffmpeg push frames in "group" at grab framerate, we store each group of frames 
Public max_buffer As Integer '= Floor(fps_out / fps_in)  'we need to store exactly fps_out / fps_in frames.

Public MySock As Socket

Public timer1 As Timer

Public sscript As String = ""

Public queue As Boolean = True


Public Sub start_main()
  If Not connect() Then Quit
  buffer = New String[]
  timer1 = New Timer As "Timer1"
  If queue Then 
    max_buffer = Floor(fps_out / fps_in)
      Else
    max_buffer = 0
  Endif
  start_ffmpeg()
  If queue Then 
    Timer1.delay = Ceil(1000 / fps_out) 'we have 1/1000 precision, not more
      Else
    Timer1.delay = (1000 / fps_out) / 2
  Endif
  Timer1.start
End


Public Sub start_ffmpeg()
  Dim c As String
  Dim fps_out_round As Float
  Dim scale_fast_to_h, scale_fast_to_w As Integer
  
  scale_fast_to_h = sH Div 4 'use an intermediate scaling using nearest neighbor filter for performance reasons
  scale_fast_to_W = sW Div 4 'use an intermediate scaling using nearest neighbor filter for performance reasons
  
  'since our timer can't assure fps, but only frametimes with a 1/1000 precision, we rely on the ability
  'of ffmpeg to acheive float fps:
  fps_out_round = 1000 / Ceil(1000 / 60) 
  global.mydebug("Warning, rounding frametime, new fps=" & fps_out_round)
  If sscript = "" Then 
    c = " ffmpeg -loglevel quiet"
    c &= " -f x11grab"
    c &= " -framerate " & fps_in
    c &= " -video_size " & sw & "x" & sh
    c &= " -i " & xDisplay 
    c &= " -vf " 
                 If extrafilter_pre <> "" Then c &= extrafilter_pre & ","
                 c &= "scale=" & scale_fast_to_w & ":" & scale_fast_to_h & ":flags=neighbor" 
                 c &= ",scale=" & dW & ":" & dH & ":flags=bilinear" 
                 If extrafilter_mid <> "" Then c &= "," & extrafilter_mid 
                 c &= ",fps=" & fps_out_round 
                 If smooth1 > 0 Then c &= ",tmix=" & smooth1
                 If smooth2 > 0 Then c &= ",tmix=" & smooth2
                 If extrafilter_post <> "" Then c &= "," & extrafilter_post
    c &= " -pix_fmt rgb24" 
    c &= " -vcodec rawvideo"
    c &= " -f image2pipe -"
      Else
    c = sscript
  Endif
 
  global.mydebug("starting " & c)
  
  ffmpeg = Shell c For Read Write As "ffmpeg"

End

'ottimizzazione: invece di ridimensionare l'array quando si riempie, simula la pila tramite un indice che indica l'ultimo dato arrivato
Public Sub ffmpeg_read()
  Dim sbuf As String
  Try Read #ffmpeg, sBuf, -(imgsize)
  If buffer.count >= max_buffer Then
    If queue Then 
      global.mydebug("buffer overflow, dropping oldest frame, speedup timer")
      Timer1.delay = Timer1.delay - 1 
      global.mydebug(Timer1.delay)
    Endif
    buffer.delete(0)
  Endif
  buffer.Push(sbuf)  
  global.mydebug("queue size=", buffer.count)
End

Public Sub Timer1_Timer()
  Dim data As String
  If buffer.Count > 0 Then
    data = buffer.Extract(0)[0]
    send(dW, dH, data)
    global.mydebug("sending data")
      Else
    If queue Then 
      global.mydebug("buffer underflow! Slowdown timer")
      Timer1.delay = Timer1.delay + 1
      global.mydebug(Timer1.delay)
    Endif
  Endif
End


Public Sub send(w As Integer, h As Integer, data As String)
  data = Base64(data)
  ssend(w, h, data)
End


Public Sub connect() As Boolean
  Debug "connecting..."
  MySock = New Socket
  While MySock.Status <> Net.connected 
    MySock.Connect(hhost, hport)
    Do While (MySock.Status <> Net.Connected) And (MySock.Status > 0)
      Wait 0.1
    Loop
    If MySock.Status <> Net.connected Then
      Debug "connection error"
      Wait 1
    End If
  Wend
  Debug "Connected"
  Return True
End

Public Sub ssend(w As Integer, h As Integer, data As String)
  Dim cmd As String
  cmd = "{\"command\": \"image\",\"imagewidth\":"
  cmd &= w
  cmd &= ",\"imageheight\":"
  cmd &= h
  cmd &= ",\"imagedata\":\""
  cmd &= data
  cmd &= "\",\"priority\":100}"
  cmd &= "\n"
  Try Write #MySock, cmd, Len(cmd)
  If Error Then 
    stop_main(False) 'stop everything
    connect()
    mysock.close
    start_main()
  Endif
End

Public Sub stop_main(Optional myQuit As Boolean = True)
  global.myDebug("closing...")
  Dim timeout As Integer = 10
  While ffmpeg.state = ffmpeg.running
    Shell "kill " & ffmpeg.Handle Wait
    Wait 1
    timeout = timeout - 1
    If timeout = 0 Then 
      Shell "killall -9 " & ffmpeg.handle
      Break
    Endif
  Wend
  mysock.Close
  If myQuit Then Quit
End



